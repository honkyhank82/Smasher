name: Android CI â€” Build & Deploy

on:
  push:
    branches: [ master, main ]
    tags: ['v*', 'release/*']
  workflow_dispatch: {}

permissions:
  contents: write
  packages: read

jobs:
  build-and-deploy:
    name: Build AAB and optionally deploy to Play
    runs-on: ubuntu-latest
    env:
      # these are populated from repository secrets below
      SMASHER_UPLOAD_STORE_PASSWORD: ${{ secrets.SMASHER_UPLOAD_STORE_PASSWORD }}
      SMASHER_UPLOAD_KEY_ALIAS: ${{ secrets.SMASHER_UPLOAD_KEY_ALIAS }}
      SMASHER_UPLOAD_KEY_PASSWORD: ${{ secrets.SMASHER_UPLOAD_KEY_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK (Java 17)
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Ensure Gradle uses Java home
        run: |
          echo "org.gradle.java.home=$JAVA_HOME" >> $GITHUB_WORKSPACE/app-rn/gradle.properties
        shell: bash

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper/
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install Ruby and Bundler
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1
          bundler-cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Prepare Android keystore
        run: |
          if [ -z "${KEYSTORE_BASE64}" ]; then
            echo "No KEYSTORE_BASE64 secret provided; skipping keystore preparation"
            exit 0
          fi
          mkdir -p "$GITHUB_WORKSPACE/app-rn/keystore"
          echo "$KEYSTORE_BASE64" | base64 -d > "$GITHUB_WORKSPACE/app-rn/keystore/masher-release.keystore"
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

      - name: Write Google Play service account (if provided)
        run: |
          if [ -z "${GOOGLE_PLAY_SERVICE_ACCOUNT_JSON}" ]; then
            echo "No GOOGLE_PLAY_SERVICE_ACCOUNT_JSON secret provided; skipping write"
            exit 0
          fi
          echo "$GOOGLE_PLAY_SERVICE_ACCOUNT_JSON" | base64 -d > $GITHUB_WORKSPACE/app-rn/google-play-service-account.json
        env:
          GOOGLE_PLAY_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}

      - name: Set signing env vars for Gradle
        run: |
          echo "SMASHER_UPLOAD_STORE_FILE=$GITHUB_WORKSPACE/app-rn/keystore/masher-release.keystore" >> $GITHUB_ENV
          echo "SMASHER_UPLOAD_STORE_PASSWORD=${{ secrets.SMASHER_UPLOAD_STORE_PASSWORD }}" >> $GITHUB_ENV
          echo "SMASHER_UPLOAD_KEY_ALIAS=${{ secrets.SMASHER_UPLOAD_KEY_ALIAS }}" >> $GITHUB_ENV
          echo "SMASHER_UPLOAD_KEY_PASSWORD=${{ secrets.SMASHER_UPLOAD_KEY_PASSWORD }}" >> $GITHUB_ENV

      - name: Install project dependencies
        working-directory: app-rn
        run: |
          npm ci

      - name: Build Android AAB (bundleRelease)
        working-directory: app-rn/android
        run: |
          # Run Gradle with full warnings and stacktrace, capture output to a log for debugging
          ./gradlew bundleRelease --no-daemon --warning-mode all --stacktrace 2>&1 | tee $GITHUB_WORKSPACE/app-rn/android/gradle-build.log

      - name: Check for generated AAB
        id: check_aab_exists
        run: |
          AAB_PATH="$(pwd)/app/build/outputs/bundle/release/app-release.aab"
          echo "Checking $AAB_PATH"
          if [ -f "$AAB_PATH" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "aab_path=$AAB_PATH" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "AAB not found! Listing build outputs directory:"
            ls -la $(pwd)/app/build/outputs/bundle/ 2>/dev/null || echo "bundle directory doesn't exist"
            echo "Full build directory:"
            ls -la $(pwd)/app/build/ 2>/dev/null || echo "build directory doesn't exist"
          fi

      - name: Extract version
        id: version
        run: |
          VERSION=$(grep '"version"' app-rn/package.json | head -1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Upload Gradle build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-build-log
          path: app-rn/android/gradle-build.log

      - name: Upload Gradle problems report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-problems-report
          path: app-rn/android/build/reports/problems/problems-report.html

      - name: Upload AAB artifact
        if: steps.check_aab_exists.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: app-release.aab
          path: ${{ steps.check_aab_exists.outputs.aab_path }}

      - name: Commit AAB to git
        if: steps.check_aab_exists.outputs.exists == 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Create builds directory if it doesn't exist
          mkdir -p builds/android
          
          # Copy AAB to builds directory
          cp ${{ steps.check_aab_exists.outputs.aab_path }} builds/android/app-release.aab
          
          # Get version from package.json
          VERSION=$(grep '"version"' app-rn/package.json | head -1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
          
          # Add and commit
          git add builds/android/app-release.aab
          git commit -m "build(android): AAB v${VERSION} from GitHub Actions run ${{ github.run_number }}"
          git push origin master
        shell: bash

      - name: Create GitHub release
        if: steps.check_aab_exists.outputs.exists == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Android v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          files: ${{ steps.check_aab_exists.outputs.aab_path }}
          body: "Automated Android AAB build from GitHub Actions run ${{ github.run_number }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Fastlane deploy lane (upload to Play)
        if: steps.check_aab_exists.outputs.exists == 'true'
        working-directory: app-rn
        run: |
          if [ -z "${GOOGLE_PLAY_SERVICE_ACCOUNT_JSON}" ]; then
            echo "No GOOGLE_PLAY_SERVICE_ACCOUNT_JSON secret provided; skipping Play deployment"
            exit 0
          fi
          if [ ! -f "google-play-service-account.json" ]; then
            echo "Google Play service account JSON file not found; skipping Play deployment"
            exit 0
          fi
          bundle install --path vendor/bundle
          bundle exec fastlane android deploy json_key:"google-play-service-account.json"
        env:
          GOOGLE_PLAY_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
