name: Android CI â€” Build & Deploy

on:
  push:
    branches: [ master, main ]
    tags: ['v*', 'release/*']
  workflow_dispatch: {}

permissions:
  contents: write
  packages: read

jobs:
  build-and-deploy:
    name: Build AAB and optionally deploy to Play
    runs-on: ubuntu-latest
    env:
      # these are populated from repository secrets below
      SMASHER_UPLOAD_STORE_PASSWORD: ${{ secrets.SMASHER_UPLOAD_STORE_PASSWORD }}
      SMASHER_UPLOAD_KEY_ALIAS: ${{ secrets.SMASHER_UPLOAD_KEY_ALIAS }}
      SMASHER_UPLOAD_KEY_PASSWORD: ${{ secrets.SMASHER_UPLOAD_KEY_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK (Java 17)
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Ensure Gradle uses Java home
        run: |
          echo "org.gradle.java.home=$JAVA_HOME" >> $GITHUB_WORKSPACE/app-rn/gradle.properties
        shell: bash

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper/
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install Ruby and Bundler
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1
          bundler-cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Prepare Android keystore
        run: |
          if [ -z "${KEYSTORE_BASE64}" ]; then
            echo "ERROR: No KEYSTORE_BASE64 secret provided! Cannot proceed with signing."
            exit 1
          fi
          mkdir -p "$GITHUB_WORKSPACE/app-rn/keystore"
          KEYSTORE_PATH="$GITHUB_WORKSPACE/app-rn/keystore/masher-release.keystore"
          echo "$KEYSTORE_BASE64" | base64 -d > "$KEYSTORE_PATH"
          if [ ! -f "$KEYSTORE_PATH" ]; then
            echo "ERROR: Failed to write keystore file at $KEYSTORE_PATH"
            exit 1
          fi
          ls -lh "$KEYSTORE_PATH"
          echo "Keystore prepared successfully at: $KEYSTORE_PATH"
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        shell: bash

      - name: Write Google Play service account (if provided)
        run: |
          if [ -z "${GOOGLE_PLAY_SERVICE_ACCOUNT_JSON}" ]; then
            echo "No GOOGLE_PLAY_SERVICE_ACCOUNT_JSON secret provided; skipping write"
            exit 0
          fi
          echo "$GOOGLE_PLAY_SERVICE_ACCOUNT_JSON" | base64 -d > $GITHUB_WORKSPACE/app-rn/google-play-service-account.json
        env:
          GOOGLE_PLAY_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}

      - name: Set signing env vars for Gradle
        run: |
          STORE_FILE="$GITHUB_WORKSPACE/app-rn/keystore/masher-release.keystore"
          echo "SMASHER_UPLOAD_STORE_FILE=$STORE_FILE" >> $GITHUB_ENV
          echo "SMASHER_UPLOAD_STORE_PASSWORD=${{ secrets.SMASHER_UPLOAD_STORE_PASSWORD }}" >> $GITHUB_ENV
          echo "SMASHER_UPLOAD_KEY_ALIAS=${{ secrets.SMASHER_UPLOAD_KEY_ALIAS }}" >> $GITHUB_ENV
          echo "SMASHER_UPLOAD_KEY_PASSWORD=${{ secrets.SMASHER_UPLOAD_KEY_PASSWORD }}" >> $GITHUB_ENV
          
          echo "DEBUG: Signing credentials set:"
          echo "  SMASHER_UPLOAD_STORE_FILE=$STORE_FILE"
          echo "  SMASHER_UPLOAD_STORE_PASSWORD=***"
          echo "  SMASHER_UPLOAD_KEY_ALIAS=${{ secrets.SMASHER_UPLOAD_KEY_ALIAS }}"
          echo "  SMASHER_UPLOAD_KEY_PASSWORD=***"
          
          if [ ! -f "$STORE_FILE" ]; then
            echo "ERROR: Keystore file not found at $STORE_FILE!"
            exit 1
          fi
          echo "DEBUG: Keystore file exists and is readable"
        shell: bash

      - name: Install project dependencies
        working-directory: app-rn
        run: |
          npm ci

      - name: Debug gradle.properties
        working-directory: app-rn/android
        run: |
          echo "Current gradle.properties content:"
          cat gradle.properties || echo "gradle.properties not found"
        shell: bash

      - name: Build Android AAB (bundleRelease)
        working-directory: app-rn/android
        run: |
          echo "DEBUG: Starting bundleRelease with signing credentials"
          echo "DEBUG: SMASHER_UPLOAD_STORE_FILE=${SMASHER_UPLOAD_STORE_FILE}"
          echo "DEBUG: SMASHER_UPLOAD_KEY_ALIAS=${SMASHER_UPLOAD_KEY_ALIAS}"
          
          # Run Gradle with full warnings and stacktrace
          ./gradlew bundleRelease \
            -PSMASHER_UPLOAD_STORE_FILE="${SMASHER_UPLOAD_STORE_FILE}" \
            -PSMASHER_UPLOAD_STORE_PASSWORD="${SMASHER_UPLOAD_STORE_PASSWORD}" \
            -PSMASHER_UPLOAD_KEY_ALIAS="${SMASHER_UPLOAD_KEY_ALIAS}" \
            -PSMASHER_UPLOAD_KEY_PASSWORD="${SMASHER_UPLOAD_KEY_PASSWORD}" \
            --no-daemon --warning-mode all --stacktrace 2>&1 | tee $GITHUB_WORKSPACE/app-rn/android/gradle-build.log
          
          BUILD_EXIT_CODE=$?
          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "ERROR: Gradle build failed with exit code $BUILD_EXIT_CODE"
            echo "Last 50 lines of build log:"
            tail -50 $GITHUB_WORKSPACE/app-rn/android/gradle-build.log
            exit $BUILD_EXIT_CODE
          fi
        shell: bash

      - name: Check for generated AAB
        id: check_aab_exists
        run: |
          AAB_PATH="$(pwd)/app-rn/android/app/build/outputs/bundle/release/app-release.aab"
          echo "Checking $AAB_PATH"
          if [ -f "$AAB_PATH" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "aab_path=$AAB_PATH" >> $GITHUB_OUTPUT
            echo "AAB found successfully!"
            ls -lh "$AAB_PATH"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "ERROR: AAB not found!"
            echo "Expected path: $AAB_PATH"
            echo ""
            echo "Build outputs directory structure:"
            find $(pwd)/app-rn/android/app/build -type f -name "*.aab" 2>/dev/null || echo "No AAB files found anywhere"
            echo ""
            echo "Full build directory:"
            ls -laR $(pwd)/app-rn/android/app/build/ 2>/dev/null | head -100 || echo "build directory doesn't exist"
            exit 1
          fi

      - name: Extract version and bump if needed
        id: version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(grep '"version"' app-rn/package.json | head -1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
          
          # If this is a tag push, use the tag version (without 'v' prefix)
          if [[ ${{ github.ref_type }} == 'tag' ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            # Update package.json with the new version
            sed -i "s/\"version\": \"[0-9]\+\.[0-9]\+\.[0-9]\+\"/\"version\": \"$VERSION\"/" app-rn/package.json
          else
            VERSION=$CURRENT_VERSION
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"
          
          # Also set version for Android
          cd app-rn/android
          ./gradlew setVersion -PversionName=$VERSION

      - name: Upload Gradle build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-build-log
          path: app-rn/android/gradle-build.log

      - name: Upload Gradle problems report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-problems-report
          path: app-rn/android/build/reports/problems/problems-report.html

      - name: Upload AAB artifact
        if: steps.check_aab_exists.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: app-release.aab
          path: ${{ steps.check_aab_exists.outputs.aab_path }}

      - name: Commit AAB to git
        if: steps.check_aab_exists.outputs.exists == 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Create builds directory if it doesn't exist
          mkdir -p builds/android
          
          # Copy AAB to builds directory
          cp ${{ steps.check_aab_exists.outputs.aab_path }} builds/android/app-release.aab
          
          # Get version from package.json
          VERSION=$(grep '"version"' app-rn/package.json | head -1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
          
          # Add and commit
          git add builds/android/app-release.aab
          git commit -m "build(android): AAB v${VERSION} from GitHub Actions run ${{ github.run_number }}"
          git push origin ${{ github.ref_name }}
        shell: bash

      - name: Create or Update GitHub release
        if: steps.check_aab_exists.outputs.exists == 'true' && github.ref_type == 'tag'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          TAG="v${VERSION}"
          
          # Check if tag exists
          if ! git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
            echo "Error: Tag $TAG does not exist. Please create the tag first."
            exit 1
          fi
          
          # Check if release already exists
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Updating existing release $TAG"
            # Delete existing release assets
            gh release delete-asset "$TAG" "app-release.aab" -y 2>/dev/null || true
            # Upload new asset
            gh release upload "$TAG" "${{ steps.check_aab_exists.outputs.aab_path }}" --clobber
          else
            echo "Creating new release $TAG"
            gh release create "$TAG" \
              "${{ steps.check_aab_exists.outputs.aab_path }}" \
              --title "Android v${VERSION}" \
              --notes "Automated Android AAB build from GitHub Actions run ${{ github.run_number }}"
          fi
          
          echo "Release $TAG is now available at: https://github.com/${{ github.repository }}/releases/tag/$TAG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash

      - name: Run Fastlane deploy lane (upload to Play)
        if: steps.check_aab_exists.outputs.exists == 'true'
        working-directory: app-rn
        run: |
          if [ -z "${GOOGLE_PLAY_SERVICE_ACCOUNT_JSON}" ]; then
            echo "No GOOGLE_PLAY_SERVICE_ACCOUNT_JSON secret provided; skipping Play deployment"
            exit 0
          fi
          if [ ! -f "google-play-service-account.json" ]; then
            echo "Google Play service account JSON file not found; skipping Play deployment"
            exit 0
          fi
          bundle install --path vendor/bundle
          bundle exec fastlane android deploy json_key:"google-play-service-account.json"
        env:
          GOOGLE_PLAY_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
