const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('Installing dependencies...');

// Define the dependencies to install
const dependencies = [
  // Core React Native
  'react@18.2.0',
  'react-native@0.73.4',
  'react-dom@18.2.0',
  'react-native-web@~0.19.6',
  
  // Navigation
  '@react-navigation/native@6.1.9',
  '@react-navigation/stack@6.3.20',
  '@react-navigation/bottom-tabs@6.5.11',
  'react-native-gesture-handler@~2.14.0',
  'react-native-reanimated@~3.6.0',
  'react-native-screens@~3.29.0',
  'react-native-safe-area-context@4.8.2',
  
  // UI Components
  'react-native-svg@14.1.0',
  '@shopify/flash-list@1.6.4',
  'react-hook-form@7.49.3',
  'zod@3.22.4',
  
  // Expo
  'expo@~50.0.0',
  'expo-application@~5.9.0',
  'expo-av@~13.10.0',
  'expo-constants@~15.0.0',
  'expo-device@~5.9.0',
  'expo-image-picker@~14.7.0',
  'expo-linking@~6.2.2',
  'expo-location@~16.1.0',
  'expo-notifications@~0.26.0',
  'expo-splash-screen@~0.26.0',
  'expo-status-bar@~1.11.0',
  'expo-system-ui@~2.9.0',
  'expo-updates@~0.24.0',
  
  // Networking
  'axios@1.6.2',
  'socket.io-client@4.7.2',
  '@react-native-async-storage/async-storage@1.23.0',
  '@react-native-community/netinfo@11.1.0',
  
  // Internationalization
  'i18next@23.7.10',
  'react-i18next@14.0.0',
  
  // Maps
  'react-native-maps@1.33.0',
  
  // Testing
  '@testing-library/jest-native@^5.4.3',
  '@testing-library/react-native@12.4.3',
  'jest@^29.7.0',
  'jest-expo@~50.0.1',
  'react-test-renderer@18.2.0',
  'ts-jest@^29.1.1',
  
  // Development
  'react-native-dotenv@^3.4.9',
  'patch-package@^8.0.0',
  'prettier@^3.1.0',
  'typescript@5.3.2',
  
  // TypeScript types
  '@types/jest@^29.5.8',
  '@types/node@^20.10.5',
  '@types/react@18.2.45',
  '@types/react-native@0.72.8',
  '@types/react-test-renderer@^18.0.0',
  
  // ESLint
  '@typescript-eslint/eslint-plugin@^6.13.1',
  '@typescript-eslint/parser@^6.13.1',
  'eslint@^8.54.0',
  'eslint-config-prettier@^9.0.0',
  'eslint-import-resolver-typescript@^3.6.1',
  'eslint-plugin-import@^2.29.0',
  'eslint-plugin-jsx-a11y@^6.7.1',
  'eslint-plugin-prettier@^5.0.1',
  'eslint-plugin-react@^7.33.2',
  'eslint-plugin-react-hooks@^4.6.0',
  'eslint-plugin-react-native@^4.1.0',
  'eslint-plugin-unused-imports@^3.0.0',
  
  // Babel
  '@babel/core@^7.23.7',
  '@babel/plugin-proposal-export-namespace-from@^7.18.9',
  '@babel/plugin-transform-runtime@^7.23.4',
  '@babel/preset-env@^7.23.7',
  '@babel/preset-typescript@^7.23.3',
  '@babel/runtime@^7.23.8',
  '@react-native/babel-preset@^0.73.19',
  'babel-jest@^29.7.0',
  'babel-plugin-module-resolver@^5.0.0',
  'babel-preset-expo@^10.0.0',
  
  // Sentry (commented out as it's causing issues)
  // '@sentry/react-native@5.15.0',
  // 'sentry-expo@~7.0.0',
];

// Install dependencies
function installDependencies() {
  try {
    console.log('Installing dependencies with npm...');
    execSync(`npm install --legacy-peer-deps ${dependencies.join(' ')}`, {
      stdio: 'inherit',
      cwd: process.cwd(),
    });
    
    console.log('Dependencies installed successfully!');
    
    // Create or update .gitignore
    updateGitIgnore();
    
    // Create or update .npmrc
    updateNpmRc();
    
    console.log('Setup completed successfully!');
  } catch (error) {
    console.error('Failed to install dependencies:', error);
    process.exit(1);
  }
}

// Update .gitignore file
function updateGitIgnore() {
  const gitignorePath = path.join(process.cwd(), '.gitignore');
  const gitignoreContent = `# OSX
.DS_Store

# Xcode
build/
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3
xcuserdata
*.xccheckout
*.moved-aside
DerivedData
*.hmap
*.ipa
*.xcuserstate
ios/.xcode.env.local

# Android/IntelliJ
build/
.idea
.gradle
local.properties
*.iml
*.hprof
.cxx
*.keystore
!debug.keystore

# node.js
node_modules/
npm-debug.log
yarn-debug.log
yarn-error.log

# fastlane
**/fastlane/report.xml
**/fastlane/Preview.html
**/fastlane/screenshots
**/fastlane/test_output

# Bundle artifact
*.jsbundle

# TypeScript
*.tsbuildinfo

# Environment files
.env*
!.env.example

# Xcode
*.xcodeproj/*
!*.xcodeproj/project.pbxproj
!*.xcodeproj/xcshareddata/
!*.xcworkspace/contents.xcworkspacedata

# Android/IntelliJ
**/captures/
.expo/
web-build/

# Metro
.metro-health-check*

# VS Code
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

# Temporary files
*.orig
*.rej

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# next.js
.next/
out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env.local
.env.development.local
.env.test.local
.env.production.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
`;

  fs.writeFileSync(gitignorePath, gitignoreContent);
  console.log('Updated .gitignore file');
}

// Update .npmrc file
function updateNpmRc() {
  const npmrcPath = path.join(process.cwd(), '.npmrc');
  const npmrcContent = `# Enable legacy peer deps to handle dependency conflicts
legacy-peer-deps=true

# Use the latest package versions
save-exact=true

# Disable package-lock.json to avoid conflicts with yarn.lock
package-lock=false

# Set the engine-strict flag to ensure compatibility
engine-strict=true
`;

  fs.writeFileSync(npmrcPath, npmrcContent);
  console.log('Updated .npmrc file');
}

// Run the installation
installDependencies();
