version: '3.8'

services:
  # PostgreSQL Database with PostGIS
  postgres:
    image: postgis/postgis:14-3.3-alpine
    container_name: smasher-postgres
    restart: always
    environment:
      POSTGRES_DB: smasher
      POSTGRES_USER: ${POSTGRES_USER:-smasher}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-smasher} -d smasher"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - smasher-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: smasher-redis
    restart: always
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - smasher-network

  # NestJS Backend API (Primary)
  api-primary:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: smasher-api-primary
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://${POSTGRES_USER:-smasher}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/smasher
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      RESEND_API_KEY: ${RESEND_API_KEY}
      FROM_EMAIL: ${FROM_EMAIL}
      R2_ACCOUNT_ID: ${R2_ACCOUNT_ID}
      R2_ACCESS_KEY_ID: ${R2_ACCESS_KEY_ID}
      R2_SECRET_ACCESS_KEY: ${R2_SECRET_ACCESS_KEY}
      R2_BUCKET_NAME: ${R2_BUCKET_NAME}
      R2_PUBLIC_URL: ${R2_PUBLIC_URL}
    ports:
      - "3001:3001"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - smasher-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.smasher.app`)"
      - "traefik.http.services.api.loadbalancer.server.port=3001"

  # NestJS Backend API (Backup/Failover)
  api-backup:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: smasher-api-backup
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://${POSTGRES_USER:-smasher}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/smasher
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      RESEND_API_KEY: ${RESEND_API_KEY}
      FROM_EMAIL: ${FROM_EMAIL}
      R2_ACCOUNT_ID: ${R2_ACCOUNT_ID}
      R2_ACCESS_KEY_ID: ${R2_ACCESS_KEY_ID}
      R2_SECRET_ACCESS_KEY: ${R2_SECRET_ACCESS_KEY}
      R2_BUCKET_NAME: ${R2_BUCKET_NAME}
      R2_PUBLIC_URL: ${R2_PUBLIC_URL}
    ports:
      - "3002:3001"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - smasher-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-backup.rule=Host(`api.smasher.app`)"
      - "traefik.http.services.api-backup.loadbalancer.server.port=3001"

  # Nginx Load Balancer with Health Checks
  nginx:
    image: nginx:alpine
    container_name: smasher-nginx
    restart: always
    depends_on:
      - api-primary
      - api-backup
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - smasher-network

  # Health Monitor & Auto-Recovery Service
  healthcheck-monitor:
    image: willfarrell/autoheal:latest
    container_name: smasher-autoheal
    restart: always
    environment:
      AUTOHEAL_CONTAINER_LABEL: all
      AUTOHEAL_INTERVAL: 30
      AUTOHEAL_START_PERIOD: 60
      AUTOHEAL_DEFAULT_STOP_TIMEOUT: 10
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - smasher-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  smasher-network:
    driver: bridge
